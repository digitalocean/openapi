rules:
  ratelimit-headers:
    description: Response must include ratelimit-x headers
    message: "{{description}}; missing {{property}}"
    severity: error
    given: $..responses.*
    then:
    - field: headers.ratelimit-limit
      function: truthy
    - field: headers.ratelimit-remaining
      function: truthy
    - field: headers.ratelimit-reset
      function: truthy

  properties-must-include-examples:
    description: Object properties must include examples
    given: $..properties..properties.*
    severity: error
    message: "{{error}}"
    then:
      function: ensurePropertiesExample

  params-must-include-examples:
    description: Parameters must include examples
    given: $..parameters.*
    severity: error
    message: "{{description}}; missing {{property}}"
    then:
      function: xor
      functionOptions:
        properties:
          - example
          - examples

  headers-must-include-examples:
    description: Headers must include examples
    given: $..headers.*
    severity: error
    message: "{{description}}; missing {{property}}"
    then:
      function: ensurePropertiesExample

  endpoint-must-be-ref:
    description: Endpoint must be a $ref
    message: "{{description}}; {{property}} incorrect"
    severity: error
    resolved: false
    given: $.paths.*.*
    then:
    - field: $ref
      function: truthy

  path-must-include-version:
    description: Path must include the version
    message: "{{description}}; {{property}} incorrect"
    severity: error
    resolved: false
    given: "$.paths[*]~"
    then:
      function: pattern
      functionOptions:
        match: "^/v2/.*$"

  endpoint-ref-must-be-file:
    description: Endpoint must a $ref to a file in resources/
    message: "{{description}}; {{value}} incorrect"
    severity: error
    resolved: false
    given: $.paths.*.$ref
    then:
      function: pattern
      functionOptions:
        match: "^resources\/.*yml$"

  common-responses-unauthorized:
    description: Responses should contain common response - 401 (unauthorized)
    message: "{{description}}. Missing {{property}}"
    severity: error
    given: $.paths..responses
    then:
      - field: '401'
        function: truthy

  common-responses-not-found:
    description: Responses should contain common response - 404 (not found)
    message: "{{description}}. Missing {{property}}"
    severity: error
    given: $.paths[?(@property.match(/.*\/{.*}.*/))]..responses
    then:
      - field: '404'
        function: truthy

  common-responses-too-many-requests:
    description: Responses should contain common response - 429 (too many requests)
    message: "{{description}}. Missing {{property}}"
    severity: error
    given: $.paths..responses
    then:
      - field: '429'
        function: truthy

  common-responses-server-error:
    description: Responses should contain common response - 500 (server error)
    message: "{{description}}. Missing {{property}}"
    severity: error
    given: $.paths..responses
    then:
      - field: '500'
        function: truthy

  array-properties-must-have-items-with-type:
    description: Array properties must have an items attribute with a type
    given: '$..*.properties[*]'
    severity: error
    message: "{{error}}"
    then:
      function: ensureAllArraysHaveItemTypes

  array-params-must-have-items-with-type:
    description: Array parameters must have an items attribute with a type
    given: '$..*.parameters[*]'
    severity: error
    message: "{{error}}"
    then:
      function: ensureAllArraysHaveItemTypes

  operationid-must-be-snake-cased:
    description: operationIds must be snake cased (This may include camelCase e.g. snakeAndCamel_case).
    type: style
    given: "$..operationId"
    severity: error
    message: "{{description}}; {{value}} incorrect"
    then:
      function: ensureSnakeCaseWithDigits


  operationid-must-follow-new-naming-conventions:
    description: operationIds must follow naming conventions for method
    type: style
    given: "$.paths[*][*]"
    severity: warn
    message: "{{error}}"
    then:
      function: validateOpIDNaming

  schema-key-must-be-snake-cased:
    description: schema key must be snake cased (e.g. snake_case)
    type: style
    given: "$.components['schemas'].*~"
    severity: error
    message: "{{error}}"
    then:
      function: ensureSnakeCaseWithDigits

  parameter-key-must-be-snake-cased:
    description: parameter key must be snake cased (e.g. snake_case)
    type: style
    given: "$.components['parameters'].*~"
    severity: error
    message: "{{error}}"
    then:
      function: ensureSnakeCaseWithDigits

  example-key-must-be-snake-cased:
    description: example key must be snake cased (e.g. snake_case)
    type: style
    given: "$.components['examples'].*~"
    severity: error
    message: "{{error}}"
    then:
      function: ensureSnakeCaseWithDigits

  response-key-must-be-snake-cased:
    description: response key must be snake cased (e.g. snake_case)
    type: style
    given: "$.components['responses'].*~"
    severity: error
    message: "{{error}}"
    then:
      function: ensureSnakeCaseWithDigits
